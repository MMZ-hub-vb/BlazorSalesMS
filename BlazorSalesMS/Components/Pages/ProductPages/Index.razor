@page "/products"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer
<PageTitle>Product</PageTitle>

<h1>Product List</h1>

<p>
    <a href="products/create">Create New</a>
</p>
<div class="mb-6">
    <input type="text" @bind="search" class="underline-only" @bind:event="oninput" placeholder="Search name or category" style="width:220px" />
    <a @onclick="Sortbyalphabet" style="cursor:pointer;color:darkblue;margin-left:100px">|Sort by Alphabet |</a>
    <a @onclick="SortbySalesprice" style="cursor:pointer;color:darkblue">Sort by Unit Price |</a>
</div>

<QuickGrid Items="filteredProducts.AsQueryable()" TGridItem="Product" Class="table table-striped">
    <PropertyColumn Property="product => product.ItemName" />
    <PropertyColumn Property="product => product.SKU" />
    <PropertyColumn Property="product => product.Unit" />
    <PropertyColumn Property="product => product.Category" />
    <PropertyColumn Property="@(product => product.PdnPrice.ToString("N2"))" Title="Costing Price" />
    <PropertyColumn Property="@(product => product.SalesPrice.ToString("N2"))" Title="Sales Price" />
    <PropertyColumn Property="product => product.LastUpdateDate.ToShortDateString()" Title="Last Update"/>
    <PropertyColumn Property="product => product.ExpirationDate.ToShortDateString()" Title="Expair Date"/>

    <TemplateColumn Context="product">
        <a href="@($"products/edit?id={product.Id}")">Edit</a> |
        <a href="@($"products/details?id={product.Id}")">Details</a> |
        <a href="@($"products/delete?id={product.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;
    private string search = "";
    private List<Product> products = [];
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        products = context.product.ToList();
    }
    private IEnumerable<Product> filteredProducts =>
        string.IsNullOrWhiteSpace(search)
            ? products
            : products.Where(i =>
                i.ItemName.Contains(search, StringComparison.OrdinalIgnoreCase) || i.Category.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
    void Sortbyalphabet()
    {
        context = DbFactory.CreateDbContext();
        products = context.product.OrderBy(x => x.ItemName).ToList();
    }
    void SortbySalesprice()
    {
        context = DbFactory.CreateDbContext();
       products = context.product.OrderBy(x => x.SalesPrice).ToList();
    }
}
