@page "/distributors/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Distributor</h2>
    <hr />
    @if (distributor is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@distributor.Code</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DocUrl1</dt>
            <dd class="col-sm-10">@distributor.DocUrl1</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DocUrl12</dt>
            <dd class="col-sm-10">@distributor.DocUrl12</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompanyName</dt>
            <dd class="col-sm-10">@distributor.CompanyName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PersonName</dt>
            <dd class="col-sm-10">@distributor.PersonName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@distributor.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Contact</dt>
            <dd class="col-sm-10">@distributor.Contact</dd>
        </dl>
        <EditForm method="post" Model="distributor" OnValidSubmit="DeleteDistributor" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(distributor is null)">Delete</button> |
            <a href="/distributors">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Distributor? distributor;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        distributor = await context.distributors.FirstOrDefaultAsync(m => m.Id == Id);

        if (distributor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDistributor()
    {
        using var context = DbFactory.CreateDbContext();
        context.distributors.Remove(distributor!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/distributors");
    }
}
