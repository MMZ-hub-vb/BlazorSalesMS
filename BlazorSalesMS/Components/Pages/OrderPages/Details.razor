@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Order</h2>
    <hr />
    <QuickGrid Items="order.AsQueryable()" TGridItem="Order" Class="table-striped">
    <PropertyColumn Property="order => order.OrderCode" Sortable="true" />
    <PropertyColumn Property="order => order.DistributorName" Sortable="true"/>
    <PropertyColumn Property="@(order => order.OrderDate.ToShortDateString())" Sortable="true" Title="Order Date"/>
    <PropertyColumn Property="order => order.ProductName" Sortable="true" />
    <PropertyColumn Property="order => order.Unit" Sortable="true" />
    <PropertyColumn Property="order => order.UnitPrice" Sortable="true" />
    <PropertyColumn Property="order => order.TotalPrice" Sortable="true" />
    <PropertyColumn Property="order => order.Status" Sortable="true" />
    <PropertyColumn Property="order => order.TotalPrice" Sortable="true" />
    <PropertyColumn Property="order => order.User" />
    <TemplateColumn Context="order" Title="Action">
        <a class="btn btn-warning" href="@($"orders/edit?id={order.Id}")">Edit</a> |
        <a class="btn btn-danger" href="@($"orders/delete?id={order.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
</div>

@code {
    private List<Order>? order=new();

    [SupplyParameterFromQuery]
    private string? OrderCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.order.Where(m => m.OrderCode == OrderCode).ToListAsync();

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
