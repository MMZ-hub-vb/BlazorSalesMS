@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Order</h2>
    <button class="btn btn-success">Approved Order</button>
    <hr />
    <QuickGrid Items="order.AsQueryable()" TGridItem="Order" Class="table-striped" >
    <PropertyColumn Property="order => order.OrderCode" Sortable="true" />
    <PropertyColumn Property="order => order.DistributorName" Sortable="true"/>
    <PropertyColumn Property="@(order => order.OrderDate.ToShortDateString())" Sortable="true" Title="Order Date"/>
    <PropertyColumn Property="order => order.ProductName" Sortable="true" />
    <PropertyColumn Property="order => order.Unit" Sortable="true" />
    <PropertyColumn Property="order => order.Quantity" Sortable="true" />
    <PropertyColumn Property="order => order.UnitPrice" Sortable="true" />
    <PropertyColumn Property="order => order.TotalPrice" Sortable="true" />
    <PropertyColumn Property="order => order.Status" Sortable="true" />
    <PropertyColumn Property="order => order.User" />
    <TemplateColumn Context="order" Title="Action">
        <a class="btn btn-warning" href="@($"orders/edit?id={order.Id}")">Edit</a> |
        <a class="btn btn-danger" href="@($"orders/delete?id={order.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<hr />
    <button class="btn btn-success float-end">Approved Order</button>
</div>

@code {
    private List<Order>? order=[];
    private ApplicationDbContext context = default!;
    [SupplyParameterFromQuery]
    private string? OrderCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        order = await context.order.Where(m => m.OrderCode == OrderCode).ToListAsync();

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    async Task ApprovedOrder(string OrderCode)
    {
        var context2 = DbFactory.CreateDbContext();
        var context3 = DbFactory.CreateDbContext();
        var orders = await context3.order.Where(o => o.Status == "Approval" && o.OrderCode == OrderCode).ToListAsync();
        foreach (var o in orders)
        {
            o.Status = "Approved";
            var inventory = context.Inventories.Where(x => x.PId == o.ProductId).FirstOrDefaultAsync();
            await context2.Database.ExecuteSqlRawAsync(
               "UPDATE Inventories SET QuantityOH = QuantityOH - {0} WHERE PId = {1}",
                    o.Quantity, o.ProductId);

        }
        await context3.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders", true);
    }
}
