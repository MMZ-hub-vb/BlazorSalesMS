@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Order</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DistributorName</dt>
            <dd class="col-sm-10">@order.DistributorName</dd>
            <dt class="col-sm-2">ProductName</dt>
            <dd class="col-sm-10">@order.ProductName</dd>
            <dt class="col-sm-2">Quantity</dt>
            <dd class="col-sm-10">@order.Quantity</dd>
            <dt class="col-sm-2">OrderDate</dt>
            <dd class="col-sm-10">@order.OrderDate</dd>
            <dt class="col-sm-2">DistributorId</dt>
            <dd class="col-sm-10">@order.DistributorId</dd>
            <dt class="col-sm-2">ProductId</dt>
            <dd class="col-sm-10">@order.ProductId</dd>
            <dt class="col-sm-2">OrderCode</dt>
            <dd class="col-sm-10">@order.OrderCode</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@order.Status</dd>
            <dt class="col-sm-2">Unit</dt>
            <dd class="col-sm-10">@order.Unit</dd>
            <dt class="col-sm-2">UnitPrice</dt>
            <dd class="col-sm-10">@order.UnitPrice</dd>
        </dl>
        <div>
            <a href="@($"/orders/edit?id={order.Id}")">Edit</a> |
            <a href="@($"/orders")">Back to List</a>
        </div>
    }
</div>

@code {
    private Order? order;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.order.FirstOrDefaultAsync(m => m.Id == Id);

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
