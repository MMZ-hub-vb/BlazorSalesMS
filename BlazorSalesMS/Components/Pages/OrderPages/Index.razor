@page "/orders"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Orde List</h1>

<p>
    <a class="btn btn-success" href="orders/create">Create New</a>
</p>
<div class="mb-6" style="font-weight:bold">
    <input type="text" @bind="search" class="underline-only" @bind:event="oninput" placeholder="Search Order Code or Distributor Name" style="width:250px" />
    <a style="color:darkblue">| Sort by click any Column |</a>
    <input type="radio" id="sortCode" name="sortOption" @onclick="IsChecked" /> 
    <label for="sortCode" style="color:green">Approved</label> |
    <input type="radio" id="sortCode" name="sortOption" @onclick="IsChecked2" />
    <label for="sortCode" style="color:red">Approval</label>
</div>

<QuickGrid Items="filteredOrders.AsQueryable()" TGridItem="Order" Class="table-striped custom-quickgrid">

    <PropertyColumn Property="order => order.OrderCode" Sortable="true" />
    <PropertyColumn Property="order => order.DistributorName" Sortable="true" />
    <PropertyColumn Property="@(order => order.OrderDate.ToShortDateString())" Sortable="true" Title="Order Date" />
    <PropertyColumn Property="order => order.Status" Sortable="true" Class=@rowcolor/>
    <PropertyColumn Property="order => order.TotalPrice" Sortable="true" />
    <PropertyColumn Property="order => order.User" />
    <TemplateColumn Context="order" Title="Action">
        <a class="btn btn-warning"  @onclick="() => ApprovedOrder(order.OrderCode)">Approved</a> |
        <a class="btn btn-info" href="@($"orders/details?OrderCode={order.OrderCode}")">Details</a> |
        <a class="btn btn-danger" href="@($"orders/detailsdelete?OrderCode={order.OrderCode}")">Delete Order</a> |
    </TemplateColumn>
</QuickGrid>
@if (IsPopupMgs)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block;margin-top:100px;margin-left:10px">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="background-color:whitesmoke;border:solid;border-radius:13px;width:300px">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel" style="color:red;text-align:center">@PopupMgs</h4>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-danger" @onclick="CloseMgs">Closed</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private ApplicationDbContext context = default!;
    private string search = "";
    private List<Order> orderList = [];
    private List<Order> orderAsDs = new();
    private string? sortColumn;
    private bool ascending = true;
    bool IsPopupMgs = false;
    string PopupMgs = "";
    string rowcolor = "";
    private IEnumerable<Order> filteredOrders =>
         string.IsNullOrWhiteSpace(search)
             ? orderList
             : orderList.Where(i =>
                 i.OrderCode.Contains(search, StringComparison.OrdinalIgnoreCase) || i.DistributorName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();


    protected override void OnInitialized()
    {
        //string stataus="";
        context = DbFactory.CreateDbContext();
        //orderList = context.order.ToList();
        orderList = context.order
             .GroupBy(o => new { o.OrderCode, o.DistributorName,o.User,o.Status })
             .Select(g => new Order
             {
                 OrderCode = g.Key.OrderCode,
                 DistributorName=g.Key.DistributorName,
                 User=g.Key.User,
                 Status=g.Key.Status,
                TotalPrice = g.Sum(x => (decimal)x.UnitPrice* (decimal)x.Quantity)
             }).Where(x=>x.Status=="Approval").ToList();

    }
    private async Task DeleteOrder(string OrderCode)
    {
        var context3 = DbFactory.CreateDbContext();
        var context4 = DbFactory.CreateDbContext();
        var context5 = DbFactory.CreateDbContext();
        var orders = await context4.order.Where(o => o.Status == "Approved" ||o.Status=="Approval" && o.OrderCode == OrderCode).ToListAsync();
        foreach (var o in orders)
        {
            var inventory = context5.Inventories.Where(x => x.PId == o.ProductId).FirstOrDefaultAsync();
            await context3.Database.ExecuteSqlRawAsync(
               "UPDATE Inventories SET QuantityOH = QuantityOH + {0} WHERE PId = {1}",
                    o.Quantity, o.ProductId);
        }
        using var context = DbFactory.CreateDbContext();
        var order = await context.order.FirstOrDefaultAsync(m => m.OrderCode == OrderCode);
        //using var context1 = DbFactory.CreateDbContext();
        context.order.Remove(order!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders", true);


    }
    async Task ApprovedOrder(string OrderCode)
    {
        var contextInsert = DbFactory.CreateDbContext();
        var context2 = DbFactory.CreateDbContext();
        var context3 = DbFactory.CreateDbContext();
        var productcontext = DbFactory.CreateDbContext();
        var orders = await context3.order.Where(o => o.Status == "Approval" && o.OrderCode==OrderCode).ToListAsync();
        foreach (var o in orders)
        {
            var disinventory =await context.DisInventories.Where(x => x.PId == o.ProductId && x.DistributorName==o.DistributorName).FirstOrDefaultAsync();
            if(o.Status=="Approval")
            {
                o.Status = "Approved";
                if(disinventory==null)
                {
                    await contextInsert.Database.ExecuteSqlRawAsync("INSERT INTO DisInventories (PId,DistributorName, SKU,ItemName, SalesSystem,Unit,Category,QuantityOH,SalesPrice,DistributorId,OrderDate) SELECT Id, {1} ,SKU, {2},SalesSystem,Unit,Category,{3},{4},{5},{6} FROM product Where Id={0}", o.ProductId, o.DistributorName, o.ProductName, o.Quantity, o.UnitPrice, o.DistributorId,o.OrderDate);
                }
                else
                {
                  await context2.Database.ExecuteSqlRawAsync(
                    "UPDATE DisInventories SET QuantityOH = QuantityOH + {0} WHERE PId = {1} AND DistributorId={2}",
                     o.Quantity,o.ProductId,o.DistributorId);
                }
                
            }
        }
        await context3.SaveChangesAsync();
        PopupMgs = " This order has been Approved!!";
        IsPopupMgs = true;
        //NavigationManager.NavigateTo("/orders", true);
    }
    private void SortByApproved()
    {
        context = DbFactory.CreateDbContext();
        //orderList = context.order.ToList();
        orderList = context.order
             .GroupBy(o => new { o.OrderCode, o.DistributorName, o.User, o.Status })
             .Select(g => new Order
                     {
                         OrderCode = g.Key.OrderCode,
                         DistributorName = g.Key.DistributorName,
                         User = g.Key.User,
                         Status = g.Key.Status,
                         TotalPrice = g.Sum(x => (decimal)x.UnitPrice * (decimal)x.Quantity)
                     }).Where(o => o.Status == "Approved").ToList();
        rowcolor = "approved-row";
    }
    private void SortByApproval()
    {
        context = DbFactory.CreateDbContext();
        //orderList = context.order.ToList();
        orderList = context.order
             .GroupBy(o => new { o.OrderCode, o.DistributorName, o.User, o.Status })
             .Select(g => new Order
             {
                 OrderCode = g.Key.OrderCode,
                 DistributorName = g.Key.DistributorName,
                 User = g.Key.User,
                 Status = g.Key.Status,
                 TotalPrice = g.Sum(x => (decimal)x.UnitPrice * (decimal)x.Quantity)
             }).Where(o => o.Status == "Approval").ToList();
        rowcolor = "approval-row";
    }
    private void IsChecked()
    {
        if(true)
        {
            SortByApproved();
        }
    }
    private void IsChecked2()
    {
        if (true)
        {
            SortByApproval();
        }
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
    async Task CloseMgs() { IsPopupMgs = false;  PopupMgs= ""; NavigationManager.NavigateTo("/orders", true); }
}
