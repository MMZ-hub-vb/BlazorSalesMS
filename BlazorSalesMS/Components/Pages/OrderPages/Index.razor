@page "/orders"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Orde List</h1>

<p>
    <a class="btn btn-success" href="orders/create">Create New</a>
</p>
<div class="mb-6">
    <input type="text" @bind="search" class="underline-only" @bind:event="oninput" placeholder="Search Order Code or Distributor Name" style="width:250px" />
    <a style="color:darkblue">| Sort by click any Column |</a>
</div>
<QuickGrid Items="filteredOrders.AsQueryable()" TGridItem="Order" Class="table-striped custom-quickgrid">
    <PropertyColumn Property="order => order.OrderCode" Sortable="true" />
    <PropertyColumn Property="order => order.DistributorName" Sortable="true"/>
    <PropertyColumn Property="@(order => order.OrderDate.ToShortDateString())" Sortable="true" Title="Order Date"/>

     <PropertyColumn Property="order => order.Status" Sortable="true" />
    <PropertyColumn Property="order => order.TotalPrice" Sortable="true" />
    <PropertyColumn Property="order => order.User" />
    <TemplateColumn Context="order" Title="Action">
        <a class="btn btn-warning" @onclick="()=>ApprovedOrder(order.OrderCode)">Approved</a> |
        <a class="btn btn-info" href="@($"orders/details?OrderCode={order.OrderCode}")">Details</a> |
        <a class="btn btn-danger" @onclick="()=>DeleteOrder(order.OrderCode)" >Delete</a>
    </TemplateColumn>
</QuickGrid>
@code {
    private ApplicationDbContext context = default!;
    private string search = "";
    private List<Order> orderList = [];
    private List<Order> orderAsDs = new();
    private string? sortColumn;
    private bool ascending = true;
    private IEnumerable<Order> filteredOrders =>
         string.IsNullOrWhiteSpace(search)
             ? orderList
             : orderList.Where(i =>
                 i.OrderCode.Contains(search, StringComparison.OrdinalIgnoreCase) || i.DistributorName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();

   
    protected override void OnInitialized()
    {
        //string stataus="";
        context = DbFactory.CreateDbContext();
        //orderList = context.order.ToList();
        orderList = context.order
             .GroupBy(o => new { o.OrderCode, o.DistributorName,o.User,o.Status })
             .Select(g => new Order
             {
                 OrderCode = g.Key.OrderCode,
                 DistributorName=g.Key.DistributorName,
                 User=g.Key.User,
                 Status=g.Key.Status,
                TotalPrice = g.Sum(x => (decimal)x.UnitPrice* (decimal)x.Quantity)
             }).ToList();

    }
    private async Task DeleteOrder(string OrderCode)
    {
        using var context = DbFactory.CreateDbContext();
        var order = await context.order.FirstOrDefaultAsync(m => m.OrderCode == OrderCode);

        using var context2 = DbFactory.CreateDbContext();
        context2.order.Remove(order!);
        await context2.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders", true);
    }
    async Task ApprovedOrder(string OrderCode)
    {
        var context2 = DbFactory.CreateDbContext();
        var context3 = DbFactory.CreateDbContext();
        var orders = await context3.order.Where(o => o.Status == "Approval" && o.OrderCode==OrderCode).ToListAsync();
        foreach (var o in orders)
        {
            o.Status = "Approved";
            var inventory = context.Inventories.Where(x => x.PId == o.ProductId).FirstOrDefaultAsync();
            await context2.Database.ExecuteSqlRawAsync(
               "UPDATE Inventories SET QuantityOH = QuantityOH - {0} WHERE PId = {1}",
                    o.Quantity,o.ProductId);

        }
        await context3.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders", true);
    }
   
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
