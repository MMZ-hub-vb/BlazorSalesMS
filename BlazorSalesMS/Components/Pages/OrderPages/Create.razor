@page "/orders/create"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Order</h2>

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Order" OnValidSubmit="AddOrder" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="distributorname" class="form-label">Distributor Name:</label>
                <input type="text" @bind="search2" class="underline-only" @bind:event="oninput"  placeholder="Search Distributor Name"/>
                <ValidationMessage For="() => Order.DistributorName" class="text-danger" />
            </div>
            @if (!string.IsNullOrWhiteSpace(search2))
            {
                <QuickGrid Items="filteredDistributors.AsQueryable()" TGridItem="Distributor" Class="table-striped">
                    <PropertyColumn Property="@(p=>p.CompanyName)" Title="Distributor Nmae" />
                    <PropertyColumn Property="@(p => p.Address)" Title="Address" />
                    <PropertyColumn Property="@(p => p.Code)" Title="Code" />
                </QuickGrid>
            }
            <div class="mb-3">
                <label for="distributorname" class="form-label">Product Name:</label>
                <input type="text" @bind="search" class="underline-only" @bind:event="oninput" placeholder="Search product name"  />
                <ValidationMessage For="() => Order.ProductName" class="text-danger" /> 
            </div>
            @if (!string.IsNullOrWhiteSpace(search))
            {
                <QuickGrid Items="filteredInventories.AsQueryable()" TGridItem="Inventory" Class="table-striped">
                    <PropertyColumn Property="inventory => inventory.ItemName"  Title="Item" />
                    <PropertyColumn Property="inventory => inventory.QuantityOH" Title="QtyOH" />
                    <PropertyColumn Property="inventory => inventory.Unit" />
                    <PropertyColumn Property="inventory => inventory.Category" />
                    <PropertyColumn Property="inventory => inventory.ExpirationDate.ToShortDateString()" Title="Expaired Date" />
                
                </QuickGrid>
            }
            <div class="mb-3">
                <label for="productname" class="form-label">ProductName:</label>
                <input type="text" @bind="Order.ProductName" class="underline-only" />
                <ValidationMessage For="() => Order.ProductName" class="text-danger" /> 
            </div>
          
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label>
                <input type="text" @bind="Order.Quantity" class="underline-only" />
                <ValidationMessage For="() => Order.Quantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="orderdate" class="form-label">OrderDate:</label>
                <input type="text" @bind="Order.OrderDate" class="underline-only" />
                <ValidationMessage For="() => Order.OrderDate" class="text-danger" /> 
            </div>        
          
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/orders">Back to List</a>
</div>


@code {
    [SupplyParameterFromForm]
    private Order Order { get; set; } = new();
    private string search = "";
    private string search2 = "";
    private Product? selectedProduct;
    private Distributor? selectedDistributor;
    private List<Distributor> distributors = [];
    private List<Inventory> inventories = [];
    private IEnumerable<Inventory> filteredInventories =>
         string.IsNullOrWhiteSpace(search)
             ? inventories
             : inventories.Where(i =>
                 i.ItemName.Contains(search, StringComparison.OrdinalIgnoreCase) || i.Category.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();

    private IEnumerable<Distributor> filteredDistributors =>
    string.IsNullOrWhiteSpace(search2)
    ? distributors
    : distributors.Where(i =>
         i.CompanyName.Contains(search2, StringComparison.OrdinalIgnoreCase)).ToList();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        inventories = context.Inventories.ToList();
        using var context2 = DbFactory.CreateDbContext();
        distributors = context2.distributors.ToList();
    }
    private async Task AddOrder()
    {
        using var context = DbFactory.CreateDbContext();
        context.order.Add(Order);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
    }
    private void OnRowClick(Product product)
    {
        selectedProduct = product;
    }
}
