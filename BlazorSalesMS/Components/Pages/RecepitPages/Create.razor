@page "/recepits/create"
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Env
@rendermode InteractiveServer
<h1>Create</h1>

<h2>Recepit</h2>
<hr />
<EditForm method="post" Model="Recepit" OnValidSubmit="AddRecepit" FormName="create" Enhance>
    <DataAnnotationsValidator />
<div class="row">
    <div class="col-md-4">
            <div class="mb-3">
                <label for="itemname" class="form-label">ItemName:</label> 
                <InputText id="itemname" @bind-Value="Recepit.ItemName" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Recepit.ItemName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="supplyer" class="form-label">Supplyer:</label> 
                <InputText id="supplyer" @bind-Value="Recepit.Supplyer" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Recepit.Supplyer" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label> 
                <InputText id="address" @bind-Value="Recepit.Address" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Recepit.Address" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="contactno" class="form-label">ContactNo:</label> 
                <InputText id="contactno" @bind-Value="Recepit.ContactNo" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Recepit.ContactNo" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="ivoiceno" class="form-label">InvoiceNo:</label> 
                <InputText id="ivoiceno" @bind-Value="Recepit.IvoiceNo" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Recepit.IvoiceNo" class="text-danger" /> 
            </div>
    </div>
            <div class="col-md-4">
            <div class="mb-3">
                <label for="paymentmethod" class="form-label">Payment Method:</label> 
                <InputSelect @bind-Value="Recepit.PaymentMethod" class="underline-only">
                     <option value="">--Select Method--</option>
                        <option value="Cash">Cash</option>
                        <option value="Checq">Checq</option>
                    <option value="Online">Online</option>
                </InputSelect>
            </div>        
           
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:@inventory.QuantityOH</label> 
                <InputNumber id="quantity" @bind-Value="Recepit.Quantity" class="underline-only" />
                <ValidationMessage For="() => Recepit.Quantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="amount" class="form-label">Unit Price(Last Unit Price:@inventory.SalesPrice)</label> 
                <InputNumber id="amount" @bind-Value="Recepit.UnitPrice" class="underline-only"  />
                @MgsCalculation
                <ValidationMessage For="() => Recepit.UnitPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="recepitdate" class="form-label">RecepitDate:</label> 
                <InputDate id="recepitdate" @bind-Value="Recepit.RecepitDate" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Recepit.RecepitDate" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <h3>Upload a File</h3>

                <InputFile OnChange="HandleSelected" />
                <p>@status</p>

               <!-- @if (!string.IsNullOrEmpty(savedFileName))
                {
                    <p>Saved as: <strong>@savedFileName</strong></p>
                    <img src="@($"/uploads/{savedFileName}")" alt="Uploaded image" style="max-width:200px" />
                }-->

            </div>
            
            <button type="submit" class="btn btn-primary" disabled="@IsButtonVisible">Create</button>
    </div>
   
</div>
</EditForm>
<div>
    <a href="/recepits">Back to List</a>
</div>
@if (IsPopupVisible)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block;margin-top:70px;margin-left:10px">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="background-color:snow;border:solid;border-radius:13px">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel">Caculation</h4>
                    <div style="margin-left:50px;color:red;cursor:pointer" @onclick="ClosePopup">Closed</div>
                </div>
                <div class="model-body">
                 <table class="table">
                     <tr>
                         <td>Existing QH:</td>
                         <td>@inventory.QuantityOH</td>
                         <td>Costing Price:</td>
                         <td>@inventory.PdnPrice</td>
                         </tr>
                         <tr>
                            <td>Sales Price:</td>
                            <td>@inventory.SalesPrice</td>
                            <td>Total QH:</td>
                            <td>@(inventory.QuantityOH+Recepit.Quantity)</td>
                            </tr >
                            <tr>
                           
                            <td>New Quantity:</td>
                            <td>@Recepit.Quantity:</td>
                            <td>Total Buing Cost:</td>
                            <td>@Recepit.UnitPrice</td>
                        </tr>
                 </table>
                    
                </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity:@inventory.QuantityOH</label>
                    <input type="number" id="quantity" class="underline-only" />
                </div>
                <div>
                    <button >Yes</button>
                    <button>No</button>
                </div>
                <br />
            </div>
        </div>
    </div>
}
@code {

    [SupplyParameterFromQuery]
    private string name { get; set; }

    [SupplyParameterFromForm]
    private Recepit Recepit { get; set; } = new();
    private Inventory inventory { get; set; } = new();
    private Product product { get; set; } = new();
    private string status = "";
    private string MgsCalculation = "";
    private string savedFileName = "";
    private bool IsPopupVisible = false;
    private bool IsButtonVisible = true;
    private void ClosePopup() => IsPopupVisible = false;
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        inventory =await context.Inventories.Where(x => x.ItemName == name).FirstOrDefaultAsync();
        using var context2 = DbFactory.CreateDbContext();
        product= await context.product.Where(x => x.ItemName == name).FirstOrDefaultAsync();
        Recepit.ItemName = name;
    }


    private void OnInputChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        MgsCalculation = value;
    }
    private async Task BtnCalculatePopUp()
    {
        IsPopupVisible = true;
        Recepit.ItemName = name;


    }
    private async Task AddRecepit()
    {
       
            // inventory.QuantityOH += Recepit.Quantity;
            using var context = DbFactory.CreateDbContext();
            using var context2 = DbFactory.CreateDbContext();
            using var context3 = DbFactory.CreateDbContext();
            await context2.Database.ExecuteSqlRawAsync(
       "UPDATE Inventories SET QuantityOH = QuantityOH + {0},SalesPrice={1},LastUpdateQtyDate={2} WHERE ItemName = {3}",
        Recepit.Quantity, Recepit.UnitPrice, Recepit.RecepitDate, name);

            await context3.Database.ExecuteSqlRawAsync(
           "UPDATE product SET SalesPrice = {0} WHERE ItemName = {1}",
           Recepit.UnitPrice, name);
         
            context.recepits.Add(Recepit);
            await context.SaveChangesAsync();
            //NavigationManager.NavigateTo("/recepits");
            IsPopupVisible = false;
            NavigationManager.NavigateTo("/inventories", true);
        
    }
   
   
    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        status = "Uploading...";
       
        try
        {

            var file = e.File;
            // Ensure uploads folder exists
            var uploadPath = Path.Combine(Env.WebRootPath, "uploads");
            Directory.CreateDirectory(uploadPath);

            // Use unique name to avoid overwriting
            savedFileName = $"{Guid.NewGuid()}_{file.Name}";
            var filePath = Path.Combine(uploadPath, savedFileName);
            Recepit.UrlDocName = savedFileName;

            await using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5); // 5 MB
            await using var fs = new FileStream(filePath, FileMode.Create);
            await stream.CopyToAsync(fs);

            status = "Upload complete!";
            IsButtonVisible = false;
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
    }
}
