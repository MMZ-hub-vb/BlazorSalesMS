@page "/recepits"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer
<PageTitle>Recepit List</PageTitle>

<h1>Recepit List</h1>

<div class="mb-6">
    <input type="text" @bind="search" class="underline-only" @bind:event="oninput" placeholder="Search name or category" style="width:220px" />
    <a style="color:darkblue">| Sort by click any Column |</a>
  
</div>

<QuickGrid Items="filteredInventories.AsQueryable()" TGridItem="Recepit" Class="table-striped my-grid">
    <PropertyColumn Property="recepit => recepit.ItemName" Title="Item" Sortable="true"/>
    <PropertyColumn Property="recepit => recepit.Supplyer" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.Address" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.ContactNo" Title="Contact" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.IvoiceNo" Title="Invoice" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.PaymentMethod" Title="Method" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.Quantity" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.UnitPrice" Sortable="true" />
    <PropertyColumn Property="recepit => recepit.RecepitDate.ToShortDateString()" Title="Recept Date" Sortable="true" />

    <TemplateColumn Context="recepit" Title="Action">
        <a class="btn btn-success" href="@($"recepits/edit?id={recepit.Id}")">Edit</a> |
        <a class="btn btn-info" href="@($"recepits/details?id={recepit.Id}")">Details</a> |
        <a class="btn btn-danger" href="@($"recepits/delete?id={recepit.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;
    private string search = "";
    private List<Recepit> recepits = [];

    private IEnumerable<Recepit> filteredInventories =>
         string.IsNullOrWhiteSpace(search)
             ? recepits
             : recepits.Where(i =>
                 i.ItemName.Contains(search, StringComparison.OrdinalIgnoreCase) || i.Category.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        recepits = context.recepits.ToList();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
