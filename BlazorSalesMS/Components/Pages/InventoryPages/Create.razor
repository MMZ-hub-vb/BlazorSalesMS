@page "/inventories/create"
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Inventory</h2>
<hr />
<EditForm method="post" Model="Inventory" OnValidSubmit="AddInventory" FormName="create" Enhance>
<div class="row">
    <div class="col-md-4">
      
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="itemname" class="form-label">Item Name:</label> 
                <InputText id="itemname" @bind-Value="Inventory.ItemName" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.ItemName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="sku" class="form-label">SKU:</label> 
                <InputText id="sku" @bind-Value="Inventory.SKU" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.SKU" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label> 
                <InputNumber id="quantity" @bind-Value="Inventory.Quantity" class="underline-only" />
                <ValidationMessage For="() => Inventory.Quantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="quantityoh" class="form-label">Quantity OH:</label> 
                <InputNumber id="quantityoh" @bind-Value="Inventory.QuantityOH" class="underline-only" />
                <ValidationMessage For="() => Inventory.QuantityOH" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="unit" class="form-label">Unit:</label>
                <a class="btn btn-success btn-sm" href="/units/create">Add Unit</a>
                <InputSelect @bind-Value="Inventory.Unit" class="underline-only">
                    <option value="">--Select Unit--</option>
                    @foreach (var unit in units)
                    {
                        <option value="@unit.UnitName">@unit.UnitName</option>
                    }
                </InputSelect>
            </div>        
            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>
                <a class="btn btn-success btn-sm" href="/categories/create">Add Catagory</a>
                <InputSelect @bind-Value="Inventory.Category" class="underline-only">
                    <option value="">--Select Category--</option>
                  @foreach(var cata in categories)
                    {
                        <option value="@cata.CategoryName">@cata.CategoryName</option>
                    }
              </InputSelect>
            </div>
        </div>
    <div class="col-md-4">
            <div class="mb-3">
                <label for="pdnprice" class="form-label">Pdn Price:</label> 
                <InputNumber id="pdnprice" @bind-Value="Inventory.PdnPrice" class="underline-only" />
                <ValidationMessage For="() => Inventory.PdnPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="salesprice" class="form-label">Sales Price:</label> 
                <InputNumber id="salesprice" @bind-Value="Inventory.SalesPrice" class="underline-only" />
                <ValidationMessage For="() => Inventory.SalesPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lastupdateqtydate" class="form-label">Last Update Qty Date:</label> 
                <InputDate id="lastupdateqtydate" @bind-Value="Inventory.LastUpdateQtyDate" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.LastUpdateQtyDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lastupdatepricedate" class="form-label">Last Update Price Date:</label> 
                <InputDate id="lastupdatepricedate" @bind-Value="Inventory.LastUpdatePriceDate" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.LastUpdatePriceDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="expirationdate" class="form-label">Expiration Date:</label> 
                <InputDate id="expirationdate" @bind-Value="Inventory.ExpirationDate" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.ExpirationDate" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
       
    </div>
    </div>
</EditForm>
<div>
    <a href="/inventories">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Inventory Inventory { get; set; } = new();
    private List<Category>categories=new List<Category>();
    private List<Unit> units = new List<Unit>();
    private ApplicationDbContext context = default!;
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        categories = context.Categories.ToList();
       units = context.Unit.ToList();
    }
    private async Task AddInventory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Inventories.Add(Inventory);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/inventories");
    }
}
