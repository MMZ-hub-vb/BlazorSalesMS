@page "/inventories/create"
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Inventory</h2>
<hr />
<EditForm method="post" Model="Inventory" OnValidSubmit="AddInventory" FormName="create" Enhance>
<div class="row">
    <div class="col-md-4">
      
            <DataAnnotationsValidator />
           
            <div class="mb-3">
                <label for="itemname" class="form-label">Item Name:</label> 
                <InputText id="itemname" @bind-Value="Inventory.ItemName" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.ItemName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="sku" class="form-label">SKU:</label> 
                <InputText id="sku" @bind-Value="Inventory.SKU" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Inventory.SKU" class="text-danger" /> 
            </div>        
           
            <div class="mb-3">
                <label for="quantityoh" class="form-label">Quantity OH:</label> 
                <InputNumber id="quantityoh" @bind-Value="Inventory.QuantityOH" class="underline-only" />
                <ValidationMessage For="() => Inventory.QuantityOH" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="unit" class="form-label">Unit:</label>
                <a class="btn btn-success btn-sm" href="/units/create">Add Unit</a>
                <InputSelect @bind-Value="Inventory.Unit" class="underline-only">
                    <option value="">--Select Unit--</option>
                    @foreach (var unit in units)
                    {
                        <option value="@unit.UnitName">@unit.UnitName</option>
                    }
                </InputSelect>
            </div>
        </div>
    <div class="col-md-4">
            
            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>
                <button type="button" class="btn btn-success btn-sm" @onclick="ShowPopup">Add Catagory</button>
                <InputSelect @bind-Value="Inventory.Category" class="underline-only">
                    <option value="">--Select Category--</option>
                    @foreach (var cata in categories)
                    {
                        <option value="@cata.CategoryName">@cata.CategoryName</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="pdnprice" class="form-label">Pdn Price:</label> 
                <InputNumber id="pdnprice" @bind-Value="Inventory.PdnPrice" class="underline-only" />
                <ValidationMessage For="() => Inventory.PdnPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="salesprice" class="form-label">Sales Price:</label> 
                <InputNumber id="salesprice" @bind-Value="Inventory.SalesPrice" class="underline-only" />
                <ValidationMessage For="() => Inventory.SalesPrice" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="salesprice" class="form-label">Expiration Date:</label>
                <InputDate id="salesprice" @bind-Value="Inventory.ExpirationDate" class="underline-only" />
                <ValidationMessage For="() => Inventory.ExpirationDate" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
       
    </div>
    </div>
</EditForm>
<div>
    <a href="/inventories">Back to List</a>
</div>
@if (IsPopupVisible)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block;margin-top:70px;margin-left:10px">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="background-color:snow;border:solid;border-radius:13px">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel">Create Category</h4>
                    <div style="margin-left:50px;color:red;cursor:pointer" @onclick="ClosePopup">Closed</div>

                </div>
                <div class="model-body">
                    <div class="row" style="margin-left:10px">
                        <div class="col-md-4">
                            <EditForm method="post" Model="Category" OnValidSubmit="AddCategory"  Enhance>
                                <DataAnnotationsValidator />
                                <div class="mb-3 underline-input">
                                    <label for="categoryname" class="form-label">Category Name:</label>
                                    <InputText id="categoryname" @bind-Value="Category.CategoryName" class="underline-only" aria-required="true" />
                                    <ValidationMessage For="() => Category.CategoryName" class="text-danger" />
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description:</label>
                                    <InputText id="description" @bind-Value="Category.Description" class="underline-only" aria-required="true" />
                                    <ValidationMessage For="() => Category.Description" class="text-danger" />
                                </div>
                                <button type="submit" class="btn btn-primary">Create</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <br />
            </div>
        </div>
    </div>
}
@code {
    [SupplyParameterFromForm]
    private Inventory Inventory { get; set; } = new();
    private Category Category { get; set; } = new();
    private List<Category>categories=new List<Category>();
    private List<Unit> units = new List<Unit>();
    private ApplicationDbContext context = default!;
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        categories = context.Categories.ToList();
        units = context.Unit.ToList();
    }
    private async Task AddInventory()
    {
        using var context = DbFactory.CreateDbContext();
        Inventory.LastUpdateQtyDate = DateTime.Now.Date;
        Inventory.LastUpdatePriceDate = DateTime.Now.Date;
    
        context.Inventories.Add(Inventory);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/inventories");
    }
    private async Task AddCategory()
    {
       // sping = true;
        using var context = DbFactory.CreateDbContext();
        context.Categories.Add(Category);
        await context.SaveChangesAsync();
        IsPopupVisible = false;
        NavigationManager.NavigateTo("/inventories/create",true);
    }
    private bool IsPopupVisible = false;

    private void ShowPopup() => IsPopupVisible = true;
    private void ClosePopup() => IsPopupVisible = false;
}
