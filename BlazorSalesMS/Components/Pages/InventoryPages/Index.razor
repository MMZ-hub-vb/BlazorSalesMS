@page "/inventories"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer
<PageTitle>Iventory</PageTitle>

<h2>Inventory List</h2>


<div class="mb-6">
    <input type="text"  @bind="search" class="underline-only" @bind:event="oninput" placeholder="Search name or category"  style="width:220px" />
    <a style="color:darkblue">| Sort by click any Column |</a>
    <a class="btn btn-info" href="/recepits">Recepit Details</a>
</div>
<QuickGrid  Items="filteredInventories.AsQueryable()" TGridItem="Inventory" Class="table-striped">
   
    <PropertyColumn Property="inventory => inventory.ItemName" Title="Item" Sortable="true"  />
    <PropertyColumn Property="inventory => inventory.QuantityOH" Title="QtyOH" Sortable="true" />
    <PropertyColumn Property="inventory => inventory.Unit" Sortable="true" />
    <PropertyColumn Property="inventory => inventory.Category" Sortable="true" />
    <PropertyColumn Property="@(inventory => inventory.PdnPrice.ToString("N2"))" Title="Costing Price" Sortable="true" />
    <PropertyColumn Property="@(inventory => inventory.SalesPrice.ToString("N2"))" Title="Sales Price" Sortable="true" />
    <PropertyColumn Property="inventory => inventory.ExpirationDate.ToShortDateString()" Title="Expaired Date" Sortable="true" />

    <TemplateColumn Context="inventory" Title="Action">
        <a class="btn btn-warning" href="@($"/recepits/create?id={inventory.Id}")">Recepit</a> |
        <a class="btn btn-success" href="@($"inventories/edit?id={inventory.Id}")">Edit</a> |
        <a class="btn btn-info" href="@($"inventories/details?id={inventory.Id}")">Details</a> 
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;
    private string search = "";
    private List<Inventory> inventories = [];

    private IEnumerable<Inventory> filteredInventories =>
         string.IsNullOrWhiteSpace(search)
             ? inventories
             : inventories.Where(i =>
                 i.ItemName.Contains(search, StringComparison.OrdinalIgnoreCase) || i.Category.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
   
                 
    
     protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        inventories = context.Inventories.ToList();
    }
    void Sortbyalphabet()
    {
        context = DbFactory.CreateDbContext();
        inventories = context.Inventories.OrderBy(x=>x.ItemName).ToList();
    }
    void SortbyQty()
    {
        context = DbFactory.CreateDbContext();
        inventories = context.Inventories.OrderBy(x => x.QuantityOH).ToList();
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
