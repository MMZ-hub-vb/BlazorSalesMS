@page "/inventories"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer
<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="inventories/create">Create New</a>
</p>
<div class="mb-3">
    <input type="text"  @bind="search" class="underline-only" @bind:event="oninput" placeholder="search name"  style="width:200px" />
</div>
<QuickGrid  Items="filteredInventories.AsQueryable()" TGridItem="Inventory" Class="table table-striped">
   
    <PropertyColumn Property="inventory => inventory.ItemName" />
    <PropertyColumn Property="inventory => inventory.Quantity" />
    <PropertyColumn Property="inventory => inventory.QuantityOH" />
    <PropertyColumn Property="inventory => inventory.Unit" />
    <PropertyColumn Property="inventory => inventory.Category" />
    <PropertyColumn Property="inventory => inventory.PdnPrice" />
    <PropertyColumn Property="inventory => inventory.SalesPrice" />
    <PropertyColumn Property="inventory => inventory.LastUpdateQtyDate" />
    <PropertyColumn Property="inventory => inventory.LastUpdatePriceDate" />

    <TemplateColumn Context="inventory">
        <a href="@($"inventories/edit?id={inventory.Id}")">Edit</a> |
        <a href="@($"inventories/details?id={inventory.Id}")">Details</a> |
        <a href="@($"inventories/delete?id={inventory.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;
    private string search = "";
    private List<Inventory> inventories = [];
    private IEnumerable<Inventory> filteredInventories =>
         string.IsNullOrWhiteSpace(search)
             ? inventories
             : inventories.Where(i =>
                 i.ItemName.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        inventories = context.Inventories.ToList();
    }
    void SearchItem()
    {
        context = DbFactory.CreateDbContext();
        inventories = context.Inventories.Where(i => i.ItemName.Contains(search)).ToList();
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
