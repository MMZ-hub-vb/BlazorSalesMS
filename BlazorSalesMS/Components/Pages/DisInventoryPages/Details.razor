@page "/disinventories/details"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@rendermode InteractiveServer
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>DisInventory</PageTitle>

<h1>@DistributorName Invetory List</h1>
  <QuickGrid Items="disInventories.AsQueryable()" TGridItem="DisInventory" Class="table table-striped" >
    <PropertyColumn Property="disInventories => disInventories.DistributorId" Sortable="true" Title="Code"/>
    <PropertyColumn Property="disInventories => disInventories.ItemName" Sortable="true" />
    <PropertyColumn Property="disInventories => disInventories.QuantityOH" Sortable="true" />
    <PropertyColumn Property="disInventories => disInventories.OrderDate" Sortable="true" />
</QuickGrid>

        <div>
            <a class="btn btn-info" href="@($"/disinventories")">Back to List</a>
        </div>
 
@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    [SupplyParameterFromQuery]
    private string? DistributorName { get; set; }
 
    private List<DisInventory>? disInventories = [];
 

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        disInventories = await context.DisInventories.Where(m => m.DistributorId == Id).ToListAsync();

        if (disInventories is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
