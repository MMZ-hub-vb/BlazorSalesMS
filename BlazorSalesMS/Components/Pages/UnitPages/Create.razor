@page "/units/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using BlazorSalesMS.Data
@inject IDbContextFactory<BlazorSalesMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<h1>Create</h1>

<h2>Unit</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Unit" OnValidSubmit="AddUnit" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="unitname" class="form-label">Unit Name:</label> 
                <InputText id="unitname" @bind-Value="Unit.UnitName" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Unit.UnitName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Unit.Description" class="underline-only" aria-required="true" />
                <ValidationMessage For="() => Unit.Description" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div class="row">
    <div class="col-2">
        <a href="/units">Back to List</a>
    </div>
    <div class="col-2">
        <a href="/inventories/create">Back to Add Inventory</a>
    </div>
    
</div>

@code {
    [SupplyParameterFromForm]
    private Unit Unit { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUnit()
    {
        using var context = DbFactory.CreateDbContext();
        context.Unit.Add(Unit);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/units");
    }
}
